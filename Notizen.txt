Projektion: https://en.wikipedia.org/wiki/Isometric_video_game_graphics#Dimetric_projection
Graphik: aseprite (steam)?
Musik: Chiptune wäre cool. Programme: "beepbox", "bosca ceoil", "lmms"
Soundeffekte: "sfxr" oder "bfxr"
Gifs und Videos: obs?
Programme empfohlen von DaFluffyPotato: https://www.youtube.com/watch?v=ung_U17kxDI


Denke darüber nach, wie die state machine verbessert werden kann. Ich meine
speziell den main_game state. Es macht nicht viel Sinn nur eine Instanz zu
haben. Die müsste ich dann bei jeder Levelauswahl neustarten/bereinigen.
Stattdessen kann ich einfach eine neue nehmen. Das löst auch das Problem,
dass sich mypy über  self.world = None beschwert. Und anstatt der start()
Methode kann ich eine resume() Methode benutzen. Die nimmt dann die persistent
data auf.Nützlich zum Beispiel für wenn ich das main_game kurz mit einem
Pausenmenü unterbreche und dann zum main_game zurückkehre.
Ich könnte in der run() Funktion eine Liste oder ein Dict mit aktiven states
nutzen. Das wäre dann was anderes als das Dict mit den Klassen.


typing:
Type hinting war ein interessantes Experiment. Aber in diesem Projekt bringt
es mir nichts. Es macht den Code nur schwerer lesbar und verkompliziert alles.
Und mit Pygame gibt es auch ein paar Probleme, weil das scheinbar noch nicht
so weit ist. Ich werde die hints in kürze alle rauswerfen.

Damit mypy sich nicht über Pygame beschwert, muss die leere Datei
site-packages/pygame/py.typed  existieren. In zukünftigen Versionen von Pygame
wird die vermutlich automatisch erzeugt werden. Bis dahin muss ich sie selbst
erstellen.
Zum Ausführen einfach den Befehl "mypy" im Terminal nutzen. Die mypy.ini Datei
kümmert sich im die Optionen und welche Skripte es sein sollen.
Fang einfach mal an type hints hinzuzufügen und dann erhöhe langsam die
Strenge der Optionen in der ini.

Frage bei pygame auf GitHub nach, ob man Vector2 zu einem Sequence[float] machen könnte.
Ich habe nämlich die Zeile:
self.surface.blit(image, surface_pos)
wobei surface_pos ein Vector2 ist. Mypy meint dann
error: Argument 2 to "blit" of "Surface" has incompatible type "Vector2"; expected "Union[Sequence[float], Rect]"
Vector2 ist auch nicht iterable:
x, y = position  # position is Vector2
'pygame.math.Vector2' object is not iterable
Aber vorher die Fehler separieren und ein reprex bauem.


Koordinaten:
world:
(0, 0)(1, 0)
(0, 1)(1, 1)
screen:
   (0, 0)
(0, 1)(1, 0)
   (1, 1)
Notation: (x, y)
Heißt x wird nach unten rechts größer und y wird nach unten links größer.
Anfangs hatte ich (0, 0) an der linken Ecke. Aber das hat den Nachteil, dass ich
in umgekehrte x-Richtung blitten muss, damit sich hohe tiles nicht überlappen.
So muss ich einfach nach aufsteigendem x und y sortieren und die Reihenfolge
der Blits ist korrekt.

Je nach Schwierigkeitsgrad oder Spielmodus sind die Waves anders zusammengesetzt.
Ich sollte das in einer Textdatei konfigurieren.:
Gegnertyp, Anzahl, Abstand, Trefferpunkte, Geschwindigkeit, etc.

1. Tiles und Objekte in der Welt werden auf world_surf geblittet.
2. world_surf wird auf small_display geblittet, mit Versatz je nach scrolling.
3. UI wird auch auf small_display geblittet.
4. small_display wird vergrößert und ins main_display geblittet.


Map Zoom:
Mache es so, wie in Terra Nil. Behalte die Scrollgeschwindigkeit bei, sowohl 
mit Maus als auch mit Tastatur. Zoome einfach in die Mitte der Surface hinen. Heißt
Mitte vor dem Zoom == Mitte nach dem Zoom. Bedenke aber die Umrechnung der
Mauskoordinaten in world-Koordinaten.


Falls ich mal was mit Kollisionen machen will: Ich kann Rects auch in
world Koordinaten nutzen. Dann müsste ich aber die world Koordinaten auf
einer größeren Skala aufziehen. Die Tiles wären dann z.B. an (100, 200) statt
(1, 2). Muss sein, weil Rects nur int kennen.


TODO:
* Probiere mal das logging Modul aus. Logge z.B. die Namen und Details der geladenen Levels. Ersetze print() dadurch beim debuggen.
* Die Karte zoombar machen (Mausrad oder Bild hoch und Bild runter). Natürlich mit min und max Begrenzung der Zoomstufe.
* Mobs spawnen und den Pfad folgen lassen.
* UI: Erstmal nur ein Button zum spawnen eines Mobs.
* Schreibe ein Skript für mypy mit meinen Einstellungen zu den Warnungen und so.
