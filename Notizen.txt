Projektion: https://en.wikipedia.org/wiki/Isometric_video_game_graphics#Dimetric_projection
Graphik: aseprite (steam)?
Musik: Chiptune wäre cool. Programme: "beepbox", "bosca ceoil", "lmms"
Soundeffekte: "sfxr" oder "bfxr"
Gifs und Videos: obs?
Programme empfohlen von DaFluffyPotato: https://www.youtube.com/watch?v=ung_U17kxDI


Wie mit pygame.QUIT umgehen? In den meisten Menüs einfach das Spiel beenden.
In den Optionsmenüs fragen, ob Einstellungen gespeichert werden sollen, falls
ungespeicherte existieren. Während des Spielens fragen, ob der Spielstand
gespeichert werden soll.


typing:
Type hinting war ein interessantes Experiment. Aber in diesem Projekt bringt
es mir nichts. Es macht den Code nur schwerer lesbar und verkompliziert alles.
Und mit Pygame gibt es auch ein paar Probleme, weil das scheinbar noch nicht
so weit ist. Ich werde die hints in kürze alle rauswerfen.
Damit mypy sich nicht über Pygame beschwert, muss die leere Datei
site-packages/pygame/py.typed  existieren. In zukünftigen Versionen von Pygame
wird die vermutlich automatisch erzeugt werden. Bis dahin muss ich sie selbst
erstellen.
Zum Ausführen einfach den Befehl "mypy" im Terminal nutzen. Die mypy.ini Datei
kümmert sich im die Optionen und welche Skripte es sein sollen.
Fang einfach mal an type hints hinzuzufügen und dann erhöhe langsam die
Strenge der Optionen in der ini.

Frage bei pygame auf GitHub nach, ob man Vector2 zu einem Sequence[float] machen könnte.
Ich habe nämlich die Zeile:
self.surface.blit(image, surface_pos)
wobei surface_pos ein Vector2 ist. Mypy meint dann
error: Argument 2 to "blit" of "Surface" has incompatible type "Vector2"; expected "Union[Sequence[float], Rect]"
Vector2 ist auch nicht iterable:
x, y = position  # position is Vector2
'pygame.math.Vector2' object is not iterable
Aber vorher die Fehler separieren und ein reprex bauem.


Koordinaten:
world:
(0, 0)(1, 0)
(0, 1)(1, 1)
screen:
   (0, 0)
(0, 1)(1, 0)
   (1, 1)
Notation: (x, y)
Heißt x wird nach unten rechts größer und y wird nach unten links größer.
Anfangs hatte ich (0, 0) an der linken Ecke. Aber das hat den Nachteil, dass ich
in umgekehrte x-Richtung blitten muss, damit sich hohe tiles nicht überlappen.
So muss ich einfach nach aufsteigendem x und y sortieren und die Reihenfolge
der Blits ist korrekt.


Je nach Schwierigkeitsgrad oder Spielmodus sind die Waves anders zusammengesetzt.
Ich sollte das in einer Textdatei konfigurieren.:
Gegnertyp, Anzahl, Abstand, Trefferpunkte, Geschwindigkeit, etc.


Map Zoom:
Mache es so, wie in Terra Nil. Behalte die Scrollgeschwindigkeit bei, sowohl 
mit Maus als auch mit Tastatur. Zoome einfach in die Mitte der Surface hinen. Heißt
Mitte vor dem Zoom == Mitte nach dem Zoom. Bedenke aber die Umrechnung der
Mauskoordinaten in world-Koordinaten.


Falls ich mal was mit Kollisionen machen will: Ich kann Rects auch in
world Koordinaten nutzen. Dann müsste ich aber die world Koordinaten auf
einer größeren Skala aufziehen. Die Tiles wären dann z.B. an (100, 200) statt
(1, 2). Muss sein, weil Rects nur int kennen.


Optionsmenü simpel und flach halten. Nur eine Seite. Wie in StardewValley oder der R gui.


Ich sollte vielleicht ein oder zwei fonts mitliefern, wenn möglich.


Statt überall if...else zu nutzen vielleicht ein paar getter/setter einbauen.
Z.B. Statt dass ein enemy in jedem frame testet, ob self.healt <= 0 ist, lieber
bei einem Treffer dessen health mit einem setter setzen. Dieser setter schaut
dann auch, ob self.health_ <= 0 ist und initiiert das Löschen. Oder eine normale
methode nutzen "self.set_health". Die nimmt den Schaden und Schadentyp auf,
zieht Resistenzen ab, modifiziert die health und schaut am Schluss, ob der
enemy kaputt ist.


Vielleicht es irgendwann so einrichten, dass mehrere Scenes gleichzeitig aktiv
sein können. Zum Beispiel im main game das HUD als eigene scene?
Für events die scenes von vorne nach hinten iterieren. Dann kann eine Scene im
Vordergrund ggf. den Input abfangen, damit z.B. die Maus nicht durch Menüs
hindurchklickt. Muss aber auch manche Events durchlassen können. Aber für draw()
muss von hinten nach vorne iteriert werden, mit reversed(self.active_scenes).


TODO:
* Probiere mal das logging Modul aus. Logge z.B. die Namen und Details der
  geladenen Levels. Ersetze print() dadurch beim debuggen.
* Mobs spawnen und den Pfad folgen lassen.
* UI: Erstmal nur ein Button zum spawnen eines Mobs.
* Übergänge zwischen Menü und main game: ausblenden und einblenden, vllt. jeweils
  halbe Sekunde. Aber zwischen den Menüs keine Übergänge.
* Optionsmenü zum Ändern der Keybindings.
* Die Debug-Info im Main Game hüpft. Scheint als hätte ich nicht die ganze Höhe
  ausgenutzt? Oder das Zentrieren ist schuld.
